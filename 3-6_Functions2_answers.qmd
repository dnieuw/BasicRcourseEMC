# Functions2: Answers {.unnumbered}

::: callout-warning
Make sure that you try the exercises yourself first before looking at the answers
:::

## if(), else, and ifelse() and Vectorization

::: panel-tabset
### Question 12

Write a function called 'evenOrOdd' involving `if` and `else` that takes an argument `x` and returns "Even" or "Odd" depending on whether or not `x` is divisible by 2. (Do not use the ifelse() function).

### Anwser

```{r}
evenOrOdd <- function(x) {
  if(x %% 2 == 0) {
    return("Even")
  } else {
    return("Odd")
  }
}
```
:::

::: panel-tabset
### Question 13

Is your function 'evenOrOdd' vectorized? Check by passing it the vector:

```{r}
w <- c(3, 6, 6, 4, 7, 9, 11, 6)
```

### Answer

```{r,error=T}
evenOrOdd(w)
```

An error is given, because x in `if(x %% 2 == 0)` is longer than 1.
:::

::: panel-tabset
### Question 14

Another way to determine if each element of a vector is even or odd is to use the `ifelse()` function, which serves as a vectorized version `if` and `else`. Use `ifelse()` to obtain "Even" or "Odd" for each element of `w`.

### Answer

```{r}
ifelse(w %% 2 == 0, "Even", "Odd")
```
:::

## Terminating a function with returns, errors, and warnings

The functions `warning()` and `stop()` are used to print a warning message and to stop the execution of the function call and print an error message. For example:

```{r}
noNegMean <- function(x) {
  if(all(x < 0)) {
    stop("All values in x are negative")
  }
  
  if(any(x < 0)) {
    x[x < 0] <- 0
    warning("Negative values in x replaced by zero")
  }
  
  return(mean(x))
}
```

::: panel-tabset
### Question 15

Copy the above code and then pass `noNegMean()` a vector containing some negative and some positive values. What happens?

### Answer

```{r}
noNegMean(c(-1,0,1))
```

We get the warning message and it returned 0.3333, which is the average of `c(0, 0, 1)`.
:::

::: panel-tabset
### Question 16

What happens when you pass `noNegMean()` a vector containing all negative values?

### Answer

```{r,error=T}
noNegMean(c(-1,-1,-1))
```

We get the error message and nothing is returned.
:::

::: panel-tabset
### Question 17

Write a function `ratio()` that takes two arguments, `x` and `y`, and attempts to compute the ratio `x/y`.

If both `x == 0 & y == 0`, the function should stop and print an error message about dividing 0 by 0.

If `y == 0` (but not x), the function should print a warning message about dividing by 0, and then return `x/y` (which will be `Inf`).

In all other cases, it should return `x/y`.

Test your `ratio()` function first using two nonzero values for `x` and `y`, then using a nonzero `x` but `y = 0`, and finally using `x = 0` and `y = 0`.

### Answer

```{r}
ratio <- function(x,y) {
  if(x == 0 & y == 0) {
    stop("Cannot divide zero by zero.")
  }

  if(y == 0) {
    warning("Cannot divide by zero.")
  }

  ratio <- x/y
  return(ratio)
}
```

```{r, error=T}
ratio(2,3)

ratio(0,0)

ratio(1,0)
```
:::

## looping using for() loops and the apply functions

::: panel-tabset
### Question 18

Copy this is a function to determine if a number is a prime number:

```{r}
isPrime <- function(num){
  if (num == 2) {
    return(TRUE)
  }
  if(num > 1) {
    for(i in 2:(num-1)) {
      if ((num %% i) == 0) {
        return(FALSE)
      }
    }
  } else {
    return(FALSE)
  }
  
  return(TRUE)
}
```

Copy this matrix for which we would like to check if a number is a prime number:

```{r}
mat <- matrix(1:100, nrow=10)
```

Use the `apply()` function to calculate the prime number for each number in the matrix.

What numbers from 1 until 100 are prime numbers?

### Answer

```{r}
apply(mat, c(1,2), isPrime)
```

```{r}
mat[apply(mat, c(1,2), isPrime)]
```
:::

::: panel-tabset
### Question 19

Copy the following command to create a list containing two generations of the famous Kennedy family:

```{r}
Kennedys <- list(
    JosephJr = character(0),
    John = c("Caroline", "JohnJr", "Patrick"),
    Rosemary = character(0),
    Kathleen = character(0),
    Eunice = c("RobertIII", "Maria", "Timothy", "Mark", "Anthony"),
    Patricia = c("Christopher", "Sydney", "Victoria", "Robin"),
    Robert = c("Kathleen", "JosephII", "RobertJr", "David", 
               "MaryC", "Michael", "MaryK", "Christopher", 
               "Matthew", "Douglas", "Rory"),
    Jean = c("Stephen", "William", "Amanda", "Kym"),
    Edward = c("Kara", "EdwardJr", "Patrick")
)
```

Use a `for()` loop to loop over the list of the first generation of Kennedys, keeping track of how many children each one has in a vector.

### Answer

```{r}
children <- NULL
for(i in Kennedys){
  children <- c(children, length(i))
}
children
```
:::

::: panel-tabset
### Question 20

Now, using the `lapply()` function, loop over the list of the first generation of Kennedys and keep track of how many children each Kennedy has. What is the class of the output?

### Answer

```{r}
result <- lapply(Kennedys, length)
result

class(result)
```
:::

::: panel-tabset
### Question 21

Answer Question 20 again using the `sapply()` function. What is the class of the output?

### Answer

```{r}
result <- sapply(Kennedys, length)
result

class(result)
```
:::

::: panel-tabset
### Question 22

Load the "diamonds" dataset from the ggplot2 package by running `library(gglot2)` and calculate the average price of diamonds by color and clarity using the `tapply()` function.

### Answer

```{r}
library(ggplot2)
tapply(diamonds$price, list(diamonds$color, diamonds$clarity), mean)
```
:::
