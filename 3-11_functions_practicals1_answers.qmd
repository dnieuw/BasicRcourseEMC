# Functions 1: Answers

::: callout-warning
Make sure that you try the exercises yourself first before looking at the answers
:::

## Function Arguments

::: panel-tabset
### Question 1

Look at the help file for the function `mean()`.

How many arguments does the function have?

What types of vectors are accepted?

What is the default setting for dealing with NA values?

### Answer

Three arguments (plus further arguments).

Numerical and logical vectors are accepted.

The default setting is to NOT remove NA (missing) values.
:::

::: panel-tabset
### Question 2

Use the function `mean()` to calculate the mean of the following values:

::: callout-note
note the `NA` and use named argument matching
:::

```{r, eval = F}
c(1, 2, NA, 6)
```

### Answer

```{r}
mean(x = c(1, 2, NA, 6), na.rm = TRUE)
```
:::

::: panel-tabset
### Question 3

Do Q2 again but rearrange the arguments.

### Answer

```{r}
mean(na.rm = TRUE, x = c(1, 2, NA, 6))
```
:::

::: panel-tabset
### Question 4

Do Q2 again using positional matching.

### Answer

```{r}
mean(c(1, 2, NA, 6), 0, TRUE)
```
:::

::: panel-tabset
### Question 5

Determine the class of `mean()` using `class()`.

### Answer

```{r}
class(mean)
```

The class is `function`.
:::

::: panel-tabset
### Question 6

Determine the class of `mean()` using `str()`.

### Answer

```{r}
str(mean)
```

The class is `function`.
:::

::: panel-tabset
### Question 7

Determine the class of the value output in Q4 using `class()`.

### Answer

```{r}
class(mean(c(1, 2, NA, 6), 0, TRUE))
```

The class is `numeric`
:::

::: panel-tabset
### Question 8

Determine the class of the value output in Q4 using str().

### Answer

```{r}
str(mean(c(1, 2, NA, 6), 0, TRUE))
```

The `num` means the class is `numeric`.
:::

::: panel-tabset
### Question 9

Use R as a calculator to calculate the following values:

17\^4=?

45-2\*3=?

(45-2)\*3=?

### Answer

```{r}
17^4

45 - 2 * 3

(45 - 2) * 3
```
:::

## Use the operators %% and %/% to do the following:

::: panel-tabset
### Question 10

Calculate the remainder after dividing 29,079 into 184,277,809.

### Answer

```{r}
184277809 %% 29079
```
:::

::: panel-tabset
### Question 11

How many times does 29,079 go into 184,277,809 (i.e. what's the *integer divide* value)?

### Answer

```{r}
184277809 %/% 29079
```
:::

::: panel-tabset
### Question 12

Do the last calculation from Q8 in another way, like this:

```{r}
a <- 45
b <- 2
c <- 3
d <- (a - b) * c
```

Now check what a, b, c, and d are. You can just type the variable name (e.g. a) and hit 'Control+Enter' or use the command `print(a)`.

### Answer

```{r}
a <- 45
b <- 2
c <- 3
d <- (a - b) * c
```

```{r}
a
b
c
d
```
:::

## if(), else, and ifelse() and Vectorization

::: panel-tabset
### Question 13

Write a function called 'evenOrOdd' involving `if` and `else` that takes an argument `x` and returns "Even" or "Odd" depending on whether or not `x` is divisible by 2. (Do not use the ifelse() function).

### Anwser

```{r}
evenOrOdd <- function(x) {
  if(x %% 2 == 0) {
    return("Even")
  } else {
    return("Odd")
  }
}
```
:::

::: panel-tabset
### Question 14

Is your function 'evenOrOdd' vectorized? Check by passing it the vector:

```{r}
w <- c(3, 6, 6, 4, 7, 9, 11, 6)
```

### Answer

```{r,error=T}
evenOrOdd(w)
```

An error is given, because x in `if(x %% 2 == 0)` is longer than 1.
:::

::: panel-tabset
### Question 15

Another way to determine if each element of a vector is even or odd is to use the `ifelse()` function, which serves as a vectorized version `if` and `else`. Use `ifelse()` to obtain "Even" or "Odd" for each element of `w`.

### Answer

```{r}
ifelse(w %% 2 == 0, "Even", "Odd")
```
:::

## Logical Operators &, \|, and !

::: panel-tabset
### Question 16

What will be the result of the following:

```{r, eval=F}
(10 < 20 && 15 < 16) || 9 == 10
```

### Answer

```{r}
(10 < 20 && 15 < 16) || 9 == 10
```

TRUE because the first statement (in parentheses) is TRUE and the second is FALSE.
:::

::: panel-tabset
### Question 17

One of the following evaluates to TRUE, the other to FALSE. Which is which?

```{r, eval=F}
4 < 3 && (5 < 6 || 8 < 9)
```

```{r,eval=F}
(4 < 3 && 5 < 6) || 8 < 9
```

### Answer

```{r, eval=F}
4 < 3 && (5 < 6 || 8 < 9)
```

```{r,eval=F}
(4 < 3 && 5 < 6) || 8 < 9
```

The first one FALSE because the first statement before && is FALSE. The second one is TRUE because one of the two statements to the left and right of \|\| is TRUE
:::

::: panel-tabset
### Question 18

The data set in 'BPressure.txt' contains the systolic and diastolic blood pressure readings for 22 patients.

a)  Read the data from BPressure.txt into a data frame called bp using read.table().

b)  A person's blood pressure is classified as normal if the systolic level is below 120 and the diastolic level is below 80. Use relational, and logical operations in square brackets `[ ]` to extract from bp the rows corresponding to patients with normal blood pressures.

c)  Now use the same strategy to extract the rows corresponding to patients whose blood pressures aren't normal.

### Answer

a)  

```{r}
bp <- read.table("Data/BPressure.txt", header=TRUE)
```

b)  

```{r}
bp[(bp$Systolic < 120 & bp$Diastolic < 80), ]
```

c)  

```{r}
bp[!(bp$Systolic < 120 & bp$Diastolic < 80), ]
```
:::
