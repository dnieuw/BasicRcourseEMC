# Working with R - Answers {.unnumbered}

```{r setup, include=FALSE}
htmltools::tagList(rmarkdown::html_dependency_font_awesome())
```

```{r, echo = FALSE, purl = FALSE}
knitr::knit_hooks$set(purl = knitr::hook_purl)

options(purl = FALSE)

knitr::opts_chunk$set(purl = FALSE)
```

```{r, include = FALSE}
knitr::opts_hooks$set(eval = function(opt) {
  if (any(opt$exercise))
    opt$eval <- opt$include <- FALSE
  
  opt
})


static <- TRUE

options(width = 100)

```

```{r packages, include = FALSE}
library(kableExtra)
library(knitr)
```

```{r load_data, context="data", include=FALSE}
library(survival)
```

## Preface {data-progressive="FALSE"}

Open Rstudio to do the practicals. Note that tasks with \* are optional.

### R packages

In this practical, a number of R packages are used. The packages used (with versions that were used to generate the solutions) are:

-   `survival` (version: `r packageVersion("survival")`)

*`r R.version.string`*

### Dataset

For this practical, we will use the **heart** and **retinopathy** data sets from the `survival` package. More details about the data sets can be found in:

https://stat.ethz.ch/R-manual/R-devel/library/survival/html/heart.html

https://stat.ethz.ch/R-manual/R-devel/library/survival/html/retinopathy.html

## Basic calculations

### Expressions {.tabset .tabset-fade .tabset-pills}

::: {.panel-tabset .nav-pills}
#### Task 1

Use R as a calculator to calculate the following values:

-   $45 - 2 \times 3$
-   $(45 - 2) \times 3$
-   $17 ^4$,
-   $2 ^  (1/3)$,


#### *Hint 1*

Enter the calculations in an R-script and then run the lines using {{< kbd win=Ctrl+Enter mac=Cmd+Enter >}}.

```{r eval=FALSE, include=TRUE}
45-2*3
(45-2)*3
#etc
```


#### Solution 1

```{r save-expres, solution = TRUE, eval=F, include=TRUE}

45-2 * 3
(45-2) * 3
17^4
2^(1/3)

```


:::


### Assignment {.tabset .tabset-fade .tabset-pills}
::: panel-tabset

#### Task 2

Now use assignment to do the same calculation. Assign names `a`, `b` and `c` to each of the three values involved, then do the calculation while assigning the name `d` to the result.

#### Hint 2

Execute the following code.

```{r}
a <- 45
b <- 2
c <- 3
d <- (a - b) * c 
```

`a`, `b`, `c`, and `d` are variables. To see their values, you can just type the variable name (e.g. `a`) and hit {{< kbd Ctrl-Enter >}} or use the command `print(a)`.

#### Solution 2 {r abc, solution = TRUE, eval=FALSE, .unnumbered}

```{r}
a <- 45
b <- 2
c <- 3
d <- (a - b) * c 
print(a)
print(b)
print(c)
print(d)
d
```
:::


::: panel-tabset

R can do calculations on whole vectors at once. 

#### Task 3

Combine the two values 3 and 4 into a vector `v1` using the `c` function. Assign the name `v1` to the vector. Then calculate the square of each value in the vector. Create a vector `v2` consisting of the numbers 1 and 2 and calculate the sum of `v1` and `v2`.

#### Hint 3

Execute the following code.

```{r}
v1 <- c(3, 4)
# now compute the square of each value
# create v2 in the same way as v1 and calculate the sum
```




#### Solution 3 {r vectorscalc, solution = TRUE, eval=FALSE, .unnumbered}

```{r}
v1 <- c(3, 4) # the c(.) fucntion combines the arguments 3 and 4 into a vector
v1^2
v2 <- c(1, 2)
v1 + v2
```

:::


::: panel-tabset

A type of vector that is used often is simply a sequence of numbers

#### Task 4

Create a vector of numbers using the function call `seq(1, 9)`. Theck that `1:9` does the same thing. What do `seq(1, 9, by=2)` and `9:1` do?

#### Hint 4


```{r}
# Just type in the given code fragments and see what they do.
```

#### Solution 4 {r vectorscalc, solution = TRUE, eval=FALSE, .unnumbered}

```{r}
seq(1, 9)
1:9
seq(1, 9, by=2)
9:1
```

:::

## Loading packages and using the help function

### Loading packages {.tabset .tabset-fade .tabset-pills}

We will use data sets from the `survival` package. It is important to know how to load packages as they contain most of the functionality of R. 


::: {.panel-tabset .nav-pills}
#### Task 1

 Load the `survival` package using the `library` function.

#### *Hint 1*

Use the `library(...)` function. There should be no need to install the package as it is already installed with `R`.

#### Solution 1 {.unnumbered}

```{r, solution = TRUE, eval=FALSE}
library(survival)
# library("survival") is an alternative in this case 
# require(survival) is another alternative which does not give an error if the package cannot be found
```

:::

### Getting help {.tabset .tabset-fade .tabset-pills}

::: {.panel-tabset .nav-pills}
#### Task 2

 Ask for the documentation of the `heart` data set, using the `help` function. Then do the same for the `retinopathy` data set using `?`.

#### *Hint 2*

Use the `help(...)` function and `?`. 

#### Solution 2 {.unnumbered}

```{r help, solution = TRUE, eval=FALSE}
help("heart")
?retinopathy
```

:::

::: {.panel-tabset .nav-pills}
#### Task 3

Also ask for help on the `c`, `ls`,  `rm` and `seq` functions. Check if you can also obtain the documentation for the `c` function if you use `??combine` 

#### *Hint 3*

Use the `help(...)` fuction, and `?` or `??`. 

#### Solution 3 {.unnumbered}

```{r help2, solution = TRUE, eval=FALSE}
?c # or use help("...")
?ls
?rm
?seq
??combine
# or use help.search('...')
```

:::

## Importing and Saving Data

### Save your work {.tabset .tabset-fade .tabset-pills}

It is important to save your work. You can save the whole workspace using the function `save.image`. If you want to save only specific objects, you can use the function `save`.

::: {.panel-tabset .nav-pills}
#### Task 1

Save the vectors `numbers <- c(34, 24, 19, 23, 16)`, `numbers_2 <- c(1:200)` and `treatment <- c("yes", "yes", "no", "no", "no", "yes")`. Use the name `new_vectors`.

#### *Hint 1*

Use the function `save(...)`. Note that you need to set the working directory.

#### Solution 1

```{r save-solution, solution = TRUE, eval=FALSE}
numbers <- c(34, 24, 19, 23, 16)
numbers_2 <- c(1:200)
treatment <- c("yes", "yes", "no", "no", "no", "yes")
save(numbers, numbers_2, treatment, file = "new_vectors.RData")
```
:::

::: {.panel-tabset .nav-pills}
#### Task 2 \*

Save the vectors `events <- heart$event` and `eyes <- retinopathy$eye`. Use the name `vectors_survival`.

#### *Hint 2* \*

Use the function `save(...)`. Note that you need to set the working directory.

#### Solution 2 \*

```{r save2-solution, solution = TRUE, eval=FALSE}
events <- heart$event
eyes <- retinopathy$eye
save(events, eyes, file = "vectors_survival.RData")
```
:::

### Load your work {.tabset .tabset-fade .tabset-pills}

Let's continue working on the data sets by loading our results.

::: {.panel-tabset .nav-pills}
#### Task

Load the file `new_vectors`.

#### *Hint*

Use the function `load(...)`.

#### Solution

```{r load-solution, solution = TRUE, eval=F}
load("new_vectors.RData")
```
:::

At this point it is interesting to check the objects that are in the workspace. To do so look at the Environment tab in the upper-right hand pane. You can also use the `ls()` function to list all objects in the workspace.

### Remove your work {.tabset .tabset-fade .tabset-pills}

Remove unnecessary objects.

::: {.panel-tabset .nav-pills}
#### Task 1

Remove the vectors `numbers`, `numbers_2` and `treatment`.

#### *Hint 1*

Use the function `rm(...)`.

#### Solution 1

```{r rm-solution, solution = TRUE, eval=F}
rm(numbers, numbers_2, treatment)
```
:::

::: {.panel-tabset .nav-pills}
#### Task 2 \*

Remove the vectors `events` and `eyes`.

#### *Hint 2* \*

Use the function `rm(...)`.

#### Solution 2 \*

```{r, eval=F}
rm(events, eyes)
```
:::


At this point you can inspect the History tab in the upper-right hand pane to see the commands you have executed. If you have made a syntax file check if you can run it in it's entirety without any errors (if you have not you can piece it together from the history). Save the file to disk.
