# Functions 2: Answers

::: callout-warning
Make sure that you try the exercises yourself first before looking at the answers
:::

## Function environment and scoping

::: panel-tabset
### Question 1

For each of the following sets of commands, give the value that will be returned by the last command. Try to answer without using R.

a) 
```{r, eval=F}
w <- 5
f <- function(y) {
  return(w + y)
}
f(y = 2)
```

b) 
```{r, eval=F}
w <- 5
f <- function(y) {
  w <- 4
  return(w + y)
}
f(y = 2)
```

### Answer
a) This will return 7 because `w` is 5 and we are evaluating the function at `y = 2`

b) This will return 6 because `w` is reassigned as 4 inside the function and we are evaluating the function at `y = 2`.
:::

::: panel-tabset
### Question 2

Among the variables `w`, `d`, and `y`, which are global to `f()` and which are local? What is the value of z when executing `f(w)`

```{r}
w <- 2
f <- function(y) {
  d <- 3
  h <- function(z) {
    return(z + d)
  }
  return(y * h(y))
}
```

### Answer
The object `w` is global to `f()` while `d` and `y` are local to `f()`.

`z` is 2, because it takes the value of `y` when executing `h(y)` in function `f()`, which takes the value of global variable `w` when executing `f(w)`
:::

::: panel-tabset
### Question 3
Do the following in R:

a) Try:
```{r, eval=F}
myFun1 <- function(a) {
  b <- 3
  myFun2(a)
}

myFun2 <- function(y) {
  return(y + a + b)
}

myFun1(10)
```

What happens?

b) Now try:

```{r, eval=F}
a <- 1
b <- 2
myFun1(10)
```

What happens?

### Answer

a) We get an error message because `a` and `b` are local to `myFun1` so the function `myFun2` can't find them in the global environment.

b) We get get the value 13 because the values `a` and `b` are global so `myFun2` can find them and use them in its commands.
:::

## Decorating a function with returns, errors, and warnings

The functions `warning()` and `stop()` are used to print a warning message and to stop the execution of the function call and print an error message. For example:

```{r}
noNegMean <- function(x) {
  if(all(x < 0)) {
    stop("All values in x are negative")
  }
  
  if(any(x < 0)) {
    x[x < 0] <- 0
    warning("Negative values in x replaced by zero")
  }
  
  return(mean(x))
}
```

::: panel-tabset
### Question 1
Copy the above code and then pass `noNegMean()` a vector containing some negative and some positive values. What happens?

### Answer

```{r}
noNegMean(c(-1,0,1))
```

We get the warning message and it returned 0.3333, which is the average of `c(0, 0, 1)`.
:::

::: panel-tabset
### Question 2
What happens when you pass `noNegMean()` a vector containing all negative values?

### Answer

```{r,error=T}
noNegMean(c(-1,-1,-1))
```

We get the error message and nothing is returned.
:::

::: panel-tabset
### Question 3
Write a function `ratio()` that takes two arguments, `x` and `y`, and attempts to compute the ratio `x/y`.

If both `x == 0 & y == 0`, the function should stop and print an error message about dividing 0 by 0.

If `y == 0` (but not x), the function should print a warning message about dividing by 0, and then return `x/y` (which will be `Inf`).

In all other cases, it should return `x/y`.

Test your `ratio()` function first using two nonzero values for `x` and `y`, then using a nonzero `x` but `y = 0`, and finally using `x = 0` and `y = 0`.

### Answer
```{r}
ratio <- function(x,y) {
  if(x == 0 & y == 0) {
    stop("Cannot divide zero by zero.")
  }

  if(y == 0) {
    warning("Cannot divide by zero.")
  }

  ratio <- x/y
  return(ratio)
}
```

```{r, error=T}
ratio(2,3)

ratio(0,0)

ratio(1,0)
```
:::

## looping using for() loops and the apply functions

::: panel-tabset
### Question 1

Copy this is a function to determine if a number is a prime number:

```{r}
isPrime <- function(num){
  if (num == 2) {
    return(TRUE)
  }
  if(num > 1) {
    for(i in 2:(num-1)) {
      if ((num %% i) == 0) {
        return(FALSE)
      }
    }
  } else {
    return(FALSE)
  }
  
  return(TRUE)
}
```

Copy this matrix for which we would like to check if a number is a prime number:

```{r}
mat <- matrix(1:100, nrow=10)
```

Use the `apply()` function to calculate the prime number for each number in the matrix.

What numbers from 1 until 100 are prime numbers?

### Answer
```{r}
apply(mat, c(1,2), isPrime)
```

```{r}
mat[apply(mat, c(1,2), isPrime)]
```
:::

::: panel-tabset
### Question 2

Copy the following command to create a list containing two generations of the famous Kennedy family:

```{r}
Kennedys <- list(
    JosephJr = character(0),
    John = c("Caroline", "JohnJr", "Patrick"),
    Rosemary = character(0),
    Kathleen = character(0),
    Eunice = c("RobertIII", "Maria", "Timothy", "Mark", "Anthony"),
    Patricia = c("Christopher", "Sydney", "Victoria", "Robin"),
    Robert = c("Kathleen", "JosephII", "RobertJr", "David", 
               "MaryC", "Michael", "MaryK", "Christopher", 
               "Matthew", "Douglas", "Rory"),
    Jean = c("Stephen", "William", "Amanda", "Kym"),
    Edward = c("Kara", "EdwardJr", "Patrick")
)
```


Use a `for()` loop to loop over the list of the first generation of Kennedys, keeping track of how many children each one has in a vector.

### Answer
```{r}
children <- NULL
for(i in Kennedys){
  children <- c(children, length(i))
}
children
```
:::

::: panel-tabset
### Question 3

Now, using the `lapply()` function, loop over the list of the first generation of Kennedys and keep track of how many children each Kennedy has. What is the class of the output?

### Answer
```{r}
result <- lapply(Kennedys, length)
result

class(result)
```
:::

::: panel-tabset
### Question 4

Answer Q2 again using the `sapply()` function. What is the class of the output?

### Answer
```{r}
result <- sapply(Kennedys, length)
result

class(result)
```
:::

::: panel-tabset
### Question 5

Load the "diamonds" dataset from the ggplot2 package by running `library(gglot2)` and calculate the average price of diamonds by color and clarity using the `tapply()` function.

### Answer
```{r}
library(ggplot2)
tapply(diamonds$price, list(diamonds$color, diamonds$clarity), mean)
```
:::

